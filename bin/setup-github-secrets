#!/usr/bin/env bash

# GitHub Secrets Setup Helper Script
# This script helps you prepare the secrets needed for GitHub Actions deployment

set -e

# ============================================================================
# CONFIGURATION - Update these variables for your deployment
# ============================================================================
# You can either:
# 1. Edit the default values below, or
# 2. Set environment variables before running this script:
#    export WEB_SERVER_IP="your.web.server.ip"
#    export BUILDER_SERVER_IP="your.builder.server.ip" 
#    export APP_DOMAIN="your.app.domain"
# ============================================================================

WEB_SERVER_IP="${WEB_SERVER_IP:-138.197.155.169}"
BUILDER_SERVER_IP="${BUILDER_SERVER_IP:-165.227.38.242}"
APP_DOMAIN="${APP_DOMAIN:-array.jleb.dev}"

echo "🔐 GitHub Actions Deployment Secrets Setup"
echo "=========================================="
echo ""
echo "Configuration:"
echo "• Web Server: $WEB_SERVER_IP"
echo "• Builder Server: $BUILDER_SERVER_IP"
echo "• Application Domain: $APP_DOMAIN"
echo ""

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${GREEN}✅ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

print_error() {
    echo -e "${RED}❌ $1${NC}"
}

print_info() {
    echo -e "${BLUE}ℹ️  $1${NC}"
}

# Check if required tools are installed
check_dependencies() {
    print_info "Checking dependencies..."
    
    if ! command -v ssh-keygen &> /dev/null; then
        print_error "ssh-keygen is required but not installed"
        exit 1
    fi
    
    if ! command -v gh &> /dev/null; then
        print_warning "GitHub CLI (gh) is not installed. You'll need to add secrets manually."
        MANUAL_SETUP=true
    else
        print_status "GitHub CLI found"
        MANUAL_SETUP=false
    fi
}

# Generate SSH keys for deployment
generate_ssh_keys() {
    print_info "Setting up SSH keys for deployment..."
    
    SSH_DIR="$HOME/.ssh"
    DEPLOY_KEY="$SSH_DIR/github_actions_deploy"
    
    if [ -f "$DEPLOY_KEY" ]; then
        print_warning "SSH key already exists at $DEPLOY_KEY"
        read -p "Do you want to overwrite it? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            print_info "Using existing SSH key"
            return
        fi
    fi
    
    print_info "Generating new SSH key for GitHub Actions..."
    ssh-keygen -t ed25519 -C "github-actions-deploy-$(date +%Y%m%d)" -f "$DEPLOY_KEY" -N ""
    
    chmod 600 "$DEPLOY_KEY"
    chmod 644 "$DEPLOY_KEY.pub"
    
    print_status "SSH key generated: $DEPLOY_KEY"
    
    echo ""
    print_info "📋 Public key to add to your servers:"
    echo "======================================"
    cat "$DEPLOY_KEY.pub"
    echo "======================================"
    echo ""
    
    print_warning "You need to add this public key to both servers:"
    echo "1. Web server ($WEB_SERVER_IP): ssh-copy-id -i $DEPLOY_KEY.pub root@$WEB_SERVER_IP"
    echo "2. Builder server ($BUILDER_SERVER_IP): ssh-copy-id -i $DEPLOY_KEY.pub root@$BUILDER_SERVER_IP"
    echo ""
    
    read -p "Press Enter after you've added the public key to both servers..."
}

# Test SSH connections
test_ssh_connections() {
    print_info "Testing SSH connections..."
    
    DEPLOY_KEY="$HOME/.ssh/github_actions_deploy"
    
    if [ ! -f "$DEPLOY_KEY" ]; then
        print_error "SSH key not found at $DEPLOY_KEY"
        return 1
    fi
    
    # Test web server
    if ssh -i "$DEPLOY_KEY" -o ConnectTimeout=10 -o BatchMode=yes root@$WEB_SERVER_IP "echo 'Connection test successful'" 2>/dev/null; then
        print_status "Web server connection: OK"
    else
        print_error "Web server connection: FAILED"
        return 1
    fi
    
    # Test builder server
    if ssh -i "$DEPLOY_KEY" -o ConnectTimeout=10 -o BatchMode=yes root@$BUILDER_SERVER_IP "echo 'Connection test successful'" 2>/dev/null; then
        print_status "Builder server connection: OK"
    else
        print_error "Builder server connection: FAILED"
        return 1
    fi
}

# Collect secrets
collect_secrets() {
    print_info "Collecting secrets for GitHub Actions..."
    
    # SSH Private Key
    DEPLOY_KEY="$HOME/.ssh/github_actions_deploy"
    if [ -f "$DEPLOY_KEY" ]; then
        SSH_PRIVATE_KEY=$(cat "$DEPLOY_KEY")
        print_status "SSH private key collected"
    else
        print_error "SSH private key not found"
        return 1
    fi
    
    # Registry Password
    if [ -z "$KAMAL_REGISTRY_PASSWORD" ]; then
        print_warning "KAMAL_REGISTRY_PASSWORD environment variable not set"
        read -s -p "Enter your registry password: " REGISTRY_PASSWORD
        echo
    else
        REGISTRY_PASSWORD="$KAMAL_REGISTRY_PASSWORD"
        print_status "Registry password found in environment"
    fi
    
    # Rails Master Key
    if [ -f "config/credentials/production.key" ]; then
        RAILS_MASTER_KEY=$(cat config/credentials/production.key)
        print_status "Rails master key found"
    else
        print_error "Rails master key not found at config/credentials/production.key"
        return 1
    fi
}

# Set up GitHub secrets using CLI
setup_github_secrets_cli() {
    if [ "$MANUAL_SETUP" = true ]; then
        return
    fi
    
    print_info "Setting up GitHub secrets using CLI..."
    
    # Check if we're in a git repository and get the repo info
    if ! git remote get-url origin &> /dev/null; then
        print_error "Not in a git repository or no origin remote found"
        return 1
    fi
    
    REPO_URL=$(git remote get-url origin)
    REPO_NAME=$(basename "$REPO_URL" .git)
    REPO_OWNER=$(basename "$(dirname "$REPO_URL")" | sed 's/.*://')
    
    print_info "Repository: $REPO_OWNER/$REPO_NAME"
    
    # Set secrets
    echo "$SSH_PRIVATE_KEY" | gh secret set KAMAL_SSH_PRIVATE_KEY --repo "$REPO_OWNER/$REPO_NAME"
    echo "$SSH_PRIVATE_KEY" | gh secret set BUILDER_SSH_PRIVATE_KEY --repo "$REPO_OWNER/$REPO_NAME"
    echo "$REGISTRY_PASSWORD" | gh secret set KAMAL_REGISTRY_PASSWORD --repo "$REPO_OWNER/$REPO_NAME"
    echo "$RAILS_MASTER_KEY" | gh secret set RAILS_MASTER_KEY --repo "$REPO_OWNER/$REPO_NAME"
    
    print_status "GitHub secrets set successfully!"
}

# Display manual setup instructions
display_manual_instructions() {
    if [ "$MANUAL_SETUP" = false ]; then
        return
    fi
    
    print_info "Manual GitHub Secrets Setup Instructions"
    echo "========================================"
    echo ""
    echo "Go to your GitHub repository → Settings → Secrets and variables → Actions"
    echo "Add the following repository secrets:"
    echo ""
    
    echo "1. KAMAL_SSH_PRIVATE_KEY:"
    echo "   Copy the content below:"
    echo "   ----------------------------------------"
    echo "$SSH_PRIVATE_KEY"
    echo "   ----------------------------------------"
    echo ""
    
    echo "2. BUILDER_SSH_PRIVATE_KEY:"
    echo "   Use the same content as KAMAL_SSH_PRIVATE_KEY (unless you have separate keys)"
    echo ""
    
    echo "3. KAMAL_REGISTRY_PASSWORD:"
    echo "   Your Docker registry password"
    echo ""
    
    echo "4. RAILS_MASTER_KEY:"
    echo "   ----------------------------------------"
    echo "$RAILS_MASTER_KEY"
    echo "   ----------------------------------------"
    echo ""
}

# Validate setup
validate_setup() {
    print_info "Validating deployment setup..."
    
    # Check if kamal config is valid
    if command -v kamal &> /dev/null; then
        if kamal config &> /dev/null; then
            print_status "Kamal configuration is valid"
        else
            print_warning "Kamal configuration has issues"
        fi
    else
        print_warning "Kamal not installed locally (this is OK for GitHub Actions)"
    fi
    
    print_status "Setup validation completed"
}

# Main execution
main() {
    echo "This script will help you set up GitHub Actions deployment for your Kamal application."
    echo ""
    
    check_dependencies
    generate_ssh_keys
    test_ssh_connections
    collect_secrets
    
    if [ "$MANUAL_SETUP" = true ]; then
        display_manual_instructions
    else
        setup_github_secrets_cli
    fi
    
    validate_setup
    
    echo ""
    print_status "Setup completed!"
    echo ""
    print_info "Next steps:"
    echo "1. Push your code to the main branch to trigger a deployment"
    echo "2. Or manually trigger a deployment from the Actions tab"
    echo "3. Monitor the deployment in the Actions tab"
    echo ""
    print_info "Useful commands:"
    echo "• View deployment logs: gh run list && gh run view <run-id>"
    echo "• Manual deployment: gh workflow run deploy.yml"
    echo "• Check application: curl https://$APP_DOMAIN/up"
}

# Run main function
main "$@"